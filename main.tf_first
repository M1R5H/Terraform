provider "aws" {
    region = "us-east-1"
}


resource "aws_vpc" "main" {
    cidr_block = "10.1.0.0/16"
}

resource "aws_subnet" "main" {
    vpc_id = "${aws_vpc.main.id}"
    cidr_block = "10.1.0.0/24"
}


resource "aws_instance" "example" {
    ami           = "ami-04947a9263d1b2ddd"
    instance_type = "t2.micro"
    associate_public_ip_address = "true"
    

    subnet_id = "subnet-098576847e376bedb"
    availability_zone = "us-east-1a"
    vpc_security_group_ids = ["${aws_security_group.http_ssh.id}"]

    tags = {
        name = "terraformed-example"
    }
}

resource "aws_security_group" "http_ssh" {
    name = "terraform-example-instance" 
    vpc_id="vpc-0833e6a8aaf6de6c4"
    
     ingress {
        from_port   = "${var.server_port}"
        to_port     = "${var.server_port}"
        protocol    = "tcp"
        cidr_blocks = ["0.0.0.0/0"]
    }

    ingress {
        from_port = 22
        to_port = 22
        protocol = "tcp"
        cidr_blocks = ["0.0.0.0/0"]
    }
}

variable "server_port" {
  description = "The port the server will use for HTTP requests"
  type        = "string"
  default     = 80
}

output "public_ip" {
  value = "${aws_instance.example.public_ip}"
  description = "IP Address of the server"
}

resource "aws_launch_configuration" "example" {
  image_id        = "ami-04947a9263d1b2ddd"
  instance_type   = "t2.micro"
  security_groups = ["${aws_security_group.http_ssh.id}"]
  
  lifecycle {
    create_before_destroy = true
  }
}

resource "aws_autoscaling_group" "example" {

  launch_configuration = "${aws_launch_configuration.example.id}"
 # availability_zones   = ["${data.aws_availability_zones.all.names}"]
  vpc_zone_identifier  = ["subnet-098576847e376bedb","subnet-098576847e376bedb"]
  min_size = 2
  max_size = 3  
  
  load_balancers    = ["${aws_elb.example.name}"]
  health_check_type = "ELB"
  
  tag {
    key                 = "Name"
    value               = "terraform-asg-example"
    propagate_at_launch = true
  }
}

resource "aws_elb" "example" {
  name               = "terraform-asg-example"
 # availability_zones = ["${data.aws_availability_zones.all.names}"]
  security_groups    = ["${aws_security_group.elb.id}"]
  subnets            = ["subnet-098576847e376bedb","subnet-098576847e376bedb"]

  #Healthcheck
  health_check {
    target              = "HTTP:${var.server_port}/"
    interval            = 30
    timeout             = 3
    healthy_threshold   = 2
    unhealthy_threshold = 2
  }
  # This adds a listener for incoming HTTP requests.
  listener {
    lb_port           = 80
    lb_protocol       = "http"
    instance_port     = "${var.server_port}"
    instance_protocol = "http"
  }
}

resource "aws_security_group" "elb" {
  name = "terraform-example-elb"
  vpc_id="vpc-0833e6a8aaf6de6c4"  # Allow all outbound
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }  # Inbound HTTP from anywhere
  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

output "clb_dns_name" {
  value       = "${aws_elb.example.dns_name}"
  description = "The domain name of the load balancer"
}

data "aws_availability_zones" "all" {}